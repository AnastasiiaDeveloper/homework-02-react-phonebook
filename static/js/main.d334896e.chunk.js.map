{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","contacts","id","v4","name","number","filter","updateContacts","setState","setDefaultContacts","showFilteredContacts","this","Component","ContactForm","contactName","document","getElementById","value","props","some","contact","alert","contactPhone","push","className","placeholder","onClick","addContact","Filter","filterString","toLowerCase","filteredContacts","includes","onChange","findContactByName","ContactList","map","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAIMA,E,4MACJC,MAAQ,CACNC,SAAU,CACR,CAAEC,GAAIC,MAAMC,KAAM,gBAAiBC,OAAQ,aAC3C,CAAEH,GAAIC,MAAMC,KAAM,iBAAkBC,OAAQ,aAC5C,CAAEH,GAAIC,MAAMC,KAAM,gBAAiBC,OAAQ,aAC3C,CAAEH,GAAIC,MAAMC,KAAM,iBAAkBC,OAAQ,cAE9CC,OAAQ,GACRF,KAAM,GACNC,OAAQ,I,EAGVJ,SAAW,EAAKD,MAAMC,S,EAEtBM,eAAiB,SAAAN,GACf,EAAKA,SAAWA,EAChB,EAAKO,SAAS,CAAEP,c,EAMlBQ,mBAAqB,WACnB,EAAKD,SAAS,CAAEP,SAAU,EAAKA,Y,EAGjCS,qBAAuB,SAAAT,GACrB,EAAKO,SAAS,CAAEP,c,uDAIhB,OACE,6BACE,yCACA,kBAAC,EAAD,CACEM,eAAgBI,KAAKJ,eACrBN,SAAUU,KAAKX,MAAMC,WACvB,wCACA,kBAAC,EAAD,CACEQ,mBAAoBE,KAAKF,mBACzBC,qBAAsBC,KAAKD,qBAC3BT,SAAUU,KAAKV,WACjB,kBAAC,EAAD,CAAaA,SAAUU,KAAKX,MAAMC,gB,GA3CxBW,aAiDZC,E,2KAEF,IACMC,EADYC,SAASC,eAAe,QACZC,MAExBhB,EAAWU,KAAKO,MAAMjB,SAC5B,GAAIA,EAASkB,MAAK,SAAAC,GAAO,OAAIA,EAAQhB,OAASU,KAC5CO,MAAM,GAAD,OAAIP,EAAJ,iCADP,CAKA,IACMQ,EADaP,SAASC,eAAe,UACXC,MAEhChB,EAASsB,KAAK,CACZrB,GAAIC,MACJC,KAAMU,EACNT,OAAQiB,IAGVX,KAAKO,MAAMX,eAAeN,M,+BAGlB,IAAD,OACP,OACE,yBAAKuB,UAAU,UACX,oCACA,2BAAOtB,GAAG,OAAOuB,YAAY,kBAC7B,sCACA,2BAAOvB,GAAG,SAASuB,YAAY,oBAC/B,4BAAQC,QAAS,kBAAM,EAAKC,eAA5B,oB,GA9BgBf,aAoCpBgB,E,kLAEF,IACMC,EADcd,SAASC,eAAe,UACXC,MAAMa,cAEvC,GAAKD,EAAL,CAKA,IAAME,EAAmBpB,KAAKO,MAAMjB,SAASK,QAAO,SAAAc,GAAO,OAAIA,EAAQhB,KAAK0B,cAAcE,SAASH,MACnGlB,KAAKO,MAAMR,qBAAqBqB,QAL9BpB,KAAKO,MAAMT,uB,+BAQL,IAAD,OACP,OACE,6BACE,qDACA,2BAAOP,GAAG,SAAS+B,SAAU,kBAAM,EAAKC,4B,GAlB3BtB,aAwBfuB,EAAc,SAAAjB,GAClB,OACE,4BACGA,EAAMjB,SAASmC,KAAI,SAAAhB,GAAO,OACzB,4BACGA,EAAQhB,KADX,KACmBgB,EAAQf,aAOpBN,ICjHKsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACA5B,SAASC,eAAe,SD2HpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d334896e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport v4  from 'uuid/dist/v4'\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: v4(), name: 'Rosie Simpson', number: '459-12-56' },\n      { id: v4(), name: 'Hermione Kline', number: '443-89-12' },\n      { id: v4(), name: 'Eden Clements', number: '645-17-79' },\n      { id: v4(), name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    name: '',\n    number: '',\n  }\n\n  contacts = this.state.contacts\n\n  updateContacts = contacts => {\n    this.contacts = contacts\n    this.setState({ contacts })\n  }\n\n\n// all contacts \\ default\n\n  setDefaultContacts = () => {\n    this.setState({ contacts: this.contacts })\n  }\n\n  showFilteredContacts = contacts => {\n    this.setState({ contacts })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm\n          updateContacts={this.updateContacts}\n          contacts={this.state.contacts} />\n        <h1>Contacts</h1>\n        <Filter\n          setDefaultContacts={this.setDefaultContacts}\n          showFilteredContacts={this.showFilteredContacts}\n          contacts={this.contacts} />\n        <ContactList contacts={this.state.contacts} />\n      </div>\n    )\n  }\n}\n\nclass ContactForm extends Component {\n  addContact() {\n    const nameInput = document.getElementById('name')\n    const contactName = nameInput.value\n\n    const contacts = this.props.contacts\n    if (contacts.some(contact => contact.name === contactName)) {\n      alert(`${contactName} is already in contacts.`)\n      return\n    }\n\n    const phoneInput = document.getElementById('number')\n    const contactPhone = phoneInput.value\n\n    contacts.push({\n      id: v4(),\n      name: contactName,\n      number: contactPhone\n    })\n\n    this.props.updateContacts(contacts)\n  }\n\n  render() {\n    return (\n      <div className=\"border\">\n          <h2>Name</h2>\n          <input id=\"name\" placeholder=\"Enter name...\" />\n          <h2>Number</h2>\n          <input id=\"number\" placeholder=\"Enter number...\" />\n          <button onClick={() => this.addContact()}>Add contact</button>\n      </div>\n    )\n  }\n}\n\nclass Filter extends Component {\n  findContactByName() {\n    const filterInput = document.getElementById('filter')\n    const filterString = filterInput.value.toLowerCase()\n\n    if (!filterString) {\n      this.props.setDefaultContacts()\n      return\n    }\n\n    const filteredContacts = this.props.contacts.filter(contact => contact.name.toLowerCase().includes(filterString))\n    this.props.showFilteredContacts(filteredContacts)\n  }\n  \n  render() {\n    return (\n      <div>\n        <h2>Find contacts by name</h2>\n        <input id=\"filter\" onChange={() => this.findContactByName()} />\n      </div>\n    )\n  }\n}\n\nconst ContactList = props => {\n  return (\n    <ul>\n      {props.contacts.map(contact =>\n        <li>\n          {contact.name}: {contact.number}\n        </li>\n      )}\n    </ul>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}